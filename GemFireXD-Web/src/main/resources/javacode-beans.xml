<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) MARCH-2014 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="callbackListener" class="pivotal.au.se.gemfirexdweb.main.JavaCode">
        <property name="name">
            <value>Sample Event Callback Listener</value>
        </property>
        <property name="code">
            <value><![CDATA[
package pivotal.au.gemfirexd.listeners;

import com.pivotal.gemfirexd.callbacks.EventCallback;
import com.pivotal.gemfirexd.callbacks.Event;


import java.sql.ResultSet;
import java.sql.SQLException;

public class %sEventCallBackListenerImpl implements EventCallback
{

    @Override
    public void onEvent(Event event) throws SQLException
    {
        System.out.println("onEvent fired for " + event.getSchemaName() + "." + event.getTableName());

        if ((event.getType() == Event.Type.AFTER_INSERT))
        {
            System.out.println("AFTER_INSERT event fired");

            ResultSet rset = event.getNewRowsAsResultSet();
            // TODO:
        }
        else if ((event.getType() == Event.Type.AFTER_UPDATE))
        {
            System.out.println("AFTER_UPDATE event fired");
            // TODO:
        }
        else if ((event.getType() == Event.Type.AFTER_DELETE))
        {
            System.out.println("AFTER_DELETE event fired");
            // TODO:
        }
        else
        {
            System.out.println(event.getType().toString());
        }

        // TODO:
    }

    @Override
    public void close() throws SQLException
    {
    }

    @Override
    public void init(String s) throws SQLException
    {
    }
}
      ]]></value>
        </property>
    </bean>
    <bean id="asyncListener" class="pivotal.au.se.gemfirexdweb.main.JavaCode">
        <property name="name">
            <value>Sample Async Event Listener</value>
        </property>
        <property name="code">
            <value><![CDATA[
package pivotal.au.gemfirexd.listeners;

import com.pivotal.gemfirexd.callbacks.AsyncEventListener;
import com.pivotal.gemfirexd.callbacks.Event;

import java.util.List;

public class %sAsyncEventListener implements AsyncEventListener
{
    @Override
    public boolean processEvents(List<Event> events)
    {

        System.out.println("processEvents.size() = " + events.size());

        for (Event event: events)
        {
            // check for which schema and table this event is for
            System.out.println("event for schema.table " + event.getSchemaName() + "." + event.getTableName());

            // process events here
            switch (event.getType())
            {
                case AFTER_INSERT:
                    //TODO:

                case AFTER_UPDATE:
                    //TODO:

                case AFTER_DELETE:
                    //TODO:
            }

        }

        return true;
    }

    @Override
    public void close()
    {
    }

    @Override
    public void init(String s)
    {
    }

    @Override
    public void start()
    {
    }
}
      ]]></value>
        </property>
    </bean>
</beans>